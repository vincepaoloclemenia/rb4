.collapse#show-search class="#{ 'in' if params[:q].present? }"
	.panel
		.panel-body
			= form_for item_cost_analysis_reports_path, method: 'get' do |f|
				.row
					.col-xs-12.col-lg-6
						label Branch
						= select_tag :branch_id,  options_from_collection_for_select(current_brand.branches, "id", "name", params[:branch_id]), class: 'form-control', readonly: true, autocomplete: :off
					.col-xs-12.col-lg-6
						label Date
						= text_field_tag :date_entry, params[:date_entry], class: 'form-control',  placeholder: "mm/dd/yyyy", data: { provide: "datepicker" }, readonly: true, autocomplete: :off
				.row.mt10
					.col-xs-12
						.pull-right
							button.btn.btn-primary data-tt="tooltip" data-placement="top" data-original-title="Search"
							i.icon-glyph-42
.panel
	.panel-heading.border.pb45
		.pull-left.mt7 Item Cost Analysis Report
	.panel-body
		.no-more-tables
			table.table.table-bordered.table-striped.mb0
				thead
					tr.big-thead
						th colspan="2" = (Date.today).strftime("%B")
						th.ica-primary-thead colspan="3" Beginning Inventory
						th.ica-primary-thead colspan="4" Total Purchases	
						th.ica-primary-thead colspan="3" Ending Inventory
						th.ica-primary-thead colspan="4" 	Cost of Goods Sold
					tr.big-thead
						th Name
						th Unit
						th Qty
						th Cost
						th Total
						th Qty
						th Cost
						th Amount
						th %
						th Qty
						th Cost
						th Total
						th Qty
						th Cost
						th Amount
						th %
				tbody
					- @categories.each do |category|
						tr
							td.danger colspan="21"
								strong
									= category.name
						- get_subcategory_and_items(category, @inventory_items).each do |subcategory|
							tr
								td.info colspan="21"
									strong
										= subcategory[:subcategory].name
							- get_items(subcategory[:item_ids]).each do |item|
								tr
									td 
										strong 
										= item.name
									td = item.unit.name
									td = qty = get_inventory_item(item.id).stock_count
									
									- item_amount = item.item_value.to_f
									td = to_peso(check_value_if_nan(item_amount))
									
									- bg_total = qty * item_amount
									td = to_peso(bg_total)
									
									- purchases = get_purchases(Date.today, item.id)
									- p_qty = purchases[:quantity].to_i
									td = p_qty
									
									- p_unit_cost = purchases[:unit_cost]
									td = to_peso(p_unit_cost)
									
									- p_total = purchases[:total_cost]
									td = to_peso(p_total)
									td
									/Ending Inventory
									td
									td = to_peso(get_ending_inventory_unit_cost(bg_total, p_total, qty, p_qty))
									td 
							tr
								td Total
								
						/ - cat.subcategories.each do |subcat|
						/ 	- unless subcat.items.blank?
						/ 		tr
						/ 			td.info colspan="21"
						/ 				strong
						/ 					= subcat.name
						/ 	- subcat.items.each_with_index do |item, index|
						/ 		- if @inventory_items.include?(item.id)
						/ 			tr
						/ 				td
						/ 					strong
						/ 						= item.name
						/ 				td = item.unit.name
						/ 				td = qty = get_inventory_item(@inventory_items[index]).stock_count
						/ 				- item_amount = item.item_value.to_f
						/ 				td = to_peso(item_amount)
						/ 				td = to_peso(@total_beginning_inventory[index] = (qty * item_amount).to_f)
						/ 				td = get_purchases(Date.today, item.id)[:quantity].to_f
						/ 				td = to_peso(get_purchases(Date.today, item.id)[:unit_cost])
						/ 				td = to_peso(get_purchases(Date.today, item.id)[:total_cost])

						/ tr
						/ 	td Total
						/ 	td colspan="3"
						/ 	/ td = to_peso(@total_beginning_inventory.sum)
						/ 	td colspan="2"
							/ td = to_peso(@total_purchases.sum)
